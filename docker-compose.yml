version: '3.8'

services:
  fraud-detection:
    build: .
    container_name: safesplitx-fraud-detection
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - DEBUG=${DEBUG:-false}
      - SECRET_KEY=${SECRET_KEY}
      - FRAUD_THRESHOLD=${FRAUD_THRESHOLD:-0.5}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./models:/app/models
      - ./data:/app/data
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - safesplitx-network

  # Optional: Redis for caching (if needed by SafeSplitX)
  redis:
    image: redis:7-alpine
    container_name: safesplitx-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - safesplitx-network

  # Optional: PostgreSQL for fraud analytics (if needed)
  postgres:
    image: postgres:15-alpine
    container_name: safesplitx-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-fraud_analytics}
      - POSTGRES_USER=${POSTGRES_USER:-fraud_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    restart: unless-stopped
    networks:
      - safesplitx-network

networks:
  safesplitx-network:
    external: true
    name: safesplitx-network

volumes:
  redis_data:
  postgres_data:
